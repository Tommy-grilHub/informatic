#include <iostream>
#include <chrono>
#include <conio.h>

#include "conutils.h"


char ch = 220;
char l_ch = 223;

class Ring {
public:
    int width_;
    console_color_t color_;
    Ring* prev_;
    bool facing_up_;
    Ring(int width, console_color_t color, bool facing_up = true) : width_(width), color_(color), facing_up_(facing_up) {}
};

class Tower_stack {
    int size_ = 0;
    Ring* top_ = nullptr;
    Ring* itr_ = nullptr;
public:
    void push(int width, console_color_t color = LightCyan) {
        if (top_ == nullptr) {
            top_ = new Ring(width, color);
        }
        else {
            Ring* tmp = new Ring(width, color);
            tmp->prev_ = top_;
            top_ = tmp;
        }
        ++size_;
    }

    void push(Ring* ring) {
        ring->prev_ = top_;
        top_ = ring;
        ++size_;
    }

    Ring* pop() {
        Ring* tmp = top_;
        top_ = tmp->prev_;
        itr_ = top_;
        --size_;
        return tmp;
    }

    Ring* peek() {
        return top_;
    }

    int get_size() {
        return size_;
    }
};

enum tower_type {
    standard,
    colored,
    magnetic,
    unknown
};

class Tower {
    int x_;
    int y_;
    int size_;
    tower_type type_;
    bool is_chosen_ = false;
    int largest_ = 0;
    Tower_stack* t_stack_;
public:
    Tower(int size, tower_type type, int x, int y, bool fill = false, console_color_t first_c = White, console_color_t second_c = Black) : t_stack_(new Tower_stack()), x_(x), y_(y), size_(size), type_(type)
    {
        if (type == standard) {
            largest_ = size * 2 + 1;
            if (fill) {
                for (int i = size; i > 0; i--) {
                    t_stack_->push(i * 2 + 1);
                }
            }
        }
        else if (type == colored) {
            largest_ = size + 1;
            console_color_t tmp;
            if (fill) {
                for (int i = size / 2; i > 0; i--) {
                    t_stack_->push(i * 2 + 1, first_c);
                    tmp = first_c;
                    first_c = second_c;
                    second_c = tmp;
                }
            }
        }
        else if (type == magnetic) {
            largest_ = size + 1;
            if (fill) {
                for (int i = size / 2; i > 0; i--) {
                    t_stack_->push(i * 2 + 1);
                }
            }
        }
    }

    int get_x() {
        return x_;
    }
    int get_y() {
        return y_;
    }

    Tower_stack* get_stack() {
        return t_stack_;
    }

    void toggle() {
        console_gotoxy(x_ + (largest_ - 1) / 2, y_ + size_ + 3);
        if (is_chosen_) {
            is_chosen_ = false;
            std::cout << ' ';
        }
        else {
            is_chosen_ = true;
            std::cout << '^';
        }
    }

    Ring* raise() {
        Ring* ring = t_stack_->pop();
        console_gotoxy(x_ + (largest_ - ring->width_) / 2, y_ - 1);
        if (type_ == magnetic) {
            console_color_t upper = Blue, lower = Red;
            if (ring->facing_up_) {
                upper = Red;
                lower = Blue;
            }
            console_set_text_color(lower, Black);
            for (int i = 0; i < ring->width_; i++) {
                std::cout << l_ch;
            }
            console_gotoxy(x_ + (largest_ - ring->width_) / 2, y_ - 2);
            console_set_text_color(upper, Black);
            for (int i = 0; i < ring->width_; i++) {
                std::cout << ch;
            }
            console_set_text_color(White, Black);
            console_gotoxy(x_, y_ + size_ - (t_stack_->get_size()) * 2);
            for (int i = 0; i < largest_; i++) {
                std::cout << ' ';
                if (i == (largest_ - 1) / 2 - 1) std::cout << '|';
            }
            console_gotoxy(x_, y_ + size_ - (t_stack_->get_size()) * 2 - 1);
            for (int i = 0; i < largest_; i++) {
                std::cout << ' ';
                if (i == (largest_ - 1) / 2 - 1) std::cout << '|';
            }
        }
        else {
            console_set_text_color(ring->color_, Black);
            for (int i = 0; i < ring->width_; i++) {
                std::cout << ch;
            }
            console_set_text_color(White, Black);
            console_gotoxy(x_, y_ + size_ - t_stack_->get_size());
            for (int i = 0; i < largest_; i++) {
                std::cout << ' ';
                if (i == (largest_ - 1) / 2 - 1) std::cout << '|';
            }
        }

        return ring;
    }

    bool put(Ring* ring, Tower* raised) {
        if (raised != nullptr && (get_stack()->peek() == nullptr || ring->width_ <= get_stack()->peek()->width_)) {
            if (type_ == magnetic && raised != this) {
                if (get_stack()->peek() != nullptr && ring->facing_up_ == get_stack()->peek()->facing_up_) return false;
                if (ring->facing_up_) ring->facing_up_ = false;
                else ring->facing_up_ = true;
            }
            t_stack_->push(ring);
            draw(type_);
            console_gotoxy(raised->get_x(), raised->get_y() - 1);
            for (int i = 0; i < largest_; i++) {
                std::cout << ' ';
            }
            if (type_ == magnetic) {
                console_gotoxy(raised->get_x(), raised->get_y() - 2);
                for (int i = 0; i < largest_; i++) {
                    std::cout << ' ';
                }
            }
            return true;
        }
        return false;
    }

    int get_largest() {
        return largest_;
    }

    int get_size() {
        return size_;
    }

    void draw(tower_type type) {
        int x = x_, y = y_;
        Ring* tmp = t_stack_->peek();
        console_gotoxy(x, y);
        int k = 1;
        if (type == magnetic) k = 2;
        for (int i = 0; i < size_ - t_stack_->get_size() * k + 1; i++) {
            for (int j = 0; j < (largest_ - 1) / 2; j++) {
                std::cout << ' ';
            }
            std::cout << '|';
            console_gotoxy(x, ++y);
        }
        console_color_t upper = Blue, lower = Red;
        while (tmp != nullptr) {
            for (int i = 0; i < (largest_ - tmp->width_) / 2; i++) {
                std::cout << ' ';
            }
            if (tmp->width_ == 0) std::cout << '|';
            else {
                if (type == magnetic) {
                    if (tmp->facing_up_) {
                        upper = Red;
                        lower = Blue;
                    }
                    console_set_text_color(upper, Black);
                    for (int i = 0; i < tmp->width_; i++) {
                        std::cout << ch;
                    }
                    console_gotoxy(x, ++y);
                    for (int i = 0; i < (largest_ - tmp->width_) / 2; i++) {
                        std::cout << ' ';
                    }
                    console_set_text_color(lower, Black);
                    for (int i = 0; i < tmp->width_; i++) {
                        std::cout << l_ch;
                    }
                }
                else {
                    console_set_text_color(tmp->color_, Black);
                    for (int i = 0; i < tmp->width_; i++) {
                        std::cout << ch;
                    }
                }
                console_set_text_color(White, Black);
            }
            tmp = tmp->prev_;
            console_gotoxy(x, ++y);
        }
        for (int j = 0; j < (largest_ - 1) / 2; j++) {
            std::cout << ' ';
        }
        std::cout << '|';
    }
};

enum MoveDirection {
    kUnknown, kLeft, kRight, kUp, kDown
};

class Game {
    tower_type type_ = unknown;
    int toggled_ = 0;
    bool is_game_started_ = false;
    bool is_solving_ = false;
    bool started_solving_ = false;
    Tower* tower_[3];
public:
    void make_towers(tower_type type, int size, int x, int y) {
        if (type == standard) {
            tower_[0] = new Tower(size, type, x, y, true);
            int largest = tower_[0]->get_largest();
            tower_[1] = new Tower(size, type, x + largest + 3, y);
            tower_[2] = new Tower(size, type, (x + largest + 3) * 2, y);
        }
        else if (type == colored) {
            tower_[0] = new Tower(size * 2, type, x, y, true, Red, Blue);
            int largest = tower_[0]->get_largest();
            tower_[1] = new Tower(size * 2, type, x + largest + 3, y, true, Blue, Red);
            tower_[2] = new Tower(size * 2, type, (x + largest + 3) * 2, y);
        }
        else if (type == magnetic) {
            tower_[0] = new Tower(size * 2, type, x, y, true);
            int largest = tower_[0]->get_largest();
            tower_[1] = new Tower(size * 2, type, x + largest + 3, y);
            tower_[2] = new Tower(size * 2, type, (x + largest + 3) * 2, y);
        }
    }


    void draw() {
        if (is_game_started_) {
            system("cls");
            tower_[0]->draw(type_);
            tower_[1]->draw(type_);
            tower_[2]->draw(type_);
            tower_[0]->toggle();
        }
    }

    void start() {
        system("cls");
        system("mode con lines=40 cols=120");
        console_hide_cursor();
        console_set_text_color(White, Black);

        std::cout << "Choose the type of game:\n1 - standard\n2 - colored disks\n3 - magnetic";

        MoveDirection ver_direction{ MoveDirection::kUnknown };
        int hor_direction = 0;
        WORD vk;
        bool is_finish = false;
        int size;
        Ring* ring = nullptr;
        Tower* raised = nullptr;
        while (!is_finish) {
            if (_kbhit()) {
                vk = console_get_vk();

                switch (vk) {
                case VK_UP:
                    ver_direction = MoveDirection::kUp;
                    break;
                case VK_DOWN:
                    ver_direction = MoveDirection::kDown;
                    break;
                case VK_LEFT:
                    hor_direction = -1;
                    break;
                case VK_RIGHT:
                    hor_direction = +1;
                    break;
                case VK_NUMPAD1:
                    type_ = standard;
                    break;
                case VK_NUMPAD2:
                    type_ = colored;
                    break;
                case VK_NUMPAD3:
                    type_ = magnetic;
                    break;
                case VK_ESCAPE:
                    is_finish = true;
                    break;
                case VK_SPACE:
                    started_solving_ = true;
                    break;
                }
            }
            if (type_ != unknown) {
                if (!is_game_started_) {
                    system("cls");
                    std::cout << "Enter number of disks 1-10: ";
                    bool is_correct_value = false;
                    while (!is_correct_value) {
                        std::cin >> size;
                        if (size > 0 && size <= 10) is_correct_value = true;
                        else {
                            std::cout << "Please enter 1-10 numbers only." << std::endl;
                            std::cin.clear();
                            std::cin.ignore(10000, '\n');
                        }
                    }
                    int y = 5, x = 3;
                    make_towers(type_, size, x, y);
                    is_game_started_ = true;
                    draw();
                    console_gotoxy(0, 0);
                    if (type_ == standard) std::cout << "Press Space to solve";
                }
                if (!is_solving_) {
                    if (hor_direction) {
                        tower_[toggled_]->toggle();
                        toggled_ += hor_direction;
                        if (toggled_ == -1) toggled_ = 2;
                        if (toggled_ == 3) toggled_ = 0;
                        tower_[toggled_]->toggle();
                        hor_direction = 0;
                    }
                    if (ver_direction) {
                        if (ver_direction == kUp && tower_[toggled_]->get_stack()->get_size() > 0 && raised == nullptr) {
                            ring = tower_[toggled_]->raise();
                            raised = tower_[toggled_];
                        }
                        if (ver_direction == kDown && tower_[toggled_]->put(ring, raised)) {
                            raised = nullptr;
                        }
                        ver_direction = kUnknown;
                    }
                }
            }
        }
    }
};


int main()
{
    Game game = Game();
    game.start();


    return 0;
}
